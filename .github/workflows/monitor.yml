#!/usr/bin/env python3
"""
Workflow Validation Script
Validates GitHub Actions workflow file before deployment
"""

import yaml
import sys
from pathlib import Path

def validate_workflow():
    """Validate the GitHub Actions workflow file"""
    workflow_path = Path('.github/workflows/monitor.yml')
    
    print("üîç Validating GitHub Actions workflow...")
    
    if not workflow_path.exists():
        print(f"‚ùå Workflow file not found: {workflow_path}")
        return False
    
    try:
        # Load and parse YAML
        with open(workflow_path, 'r') as f:
            workflow = yaml.safe_load(f)
        
        print("‚úÖ YAML syntax is valid")
        
        # Check required top-level keys
        required_keys = ['name', 'on', 'permissions', 'jobs']
        for key in required_keys:
            if key in workflow:
                print(f"‚úÖ Contains '{key}'")
            else:
                print(f"‚ùå Missing required key: '{key}'")
                return False
        
        # Check jobs structure
        jobs = workflow.get('jobs', {})
        if 'monitor' in jobs and 'deploy' in jobs:
            print("‚úÖ Contains required jobs: monitor, deploy")
        else:
            print("‚ùå Missing required jobs")
            return False
        
        # Check for problematic patterns
        workflow_content = open(workflow_path, 'r').read()
        
        # Check for the specific error pattern
        problematic_patterns = [
            'secrets.SMTP_HOST',
            'secrets.GITHUB_TOKEN',
            'secrets.' in workflow_content and 'if:' in workflow_content
        ]
        
        has_issues = False
        for pattern in problematic_patterns:
            if isinstance(pattern, str) and pattern in workflow_content:
                print(f"‚ö†Ô∏è Found potentially problematic pattern: {pattern}")
                print("   Note: 'secrets' context may not be available in 'if' conditions")
                has_issues = True
        
        if not has_issues:
            print("‚úÖ No problematic patterns detected")
        
        # Check environment variables in monitor job
        monitor_job = jobs.get('monitor', {})
        monitor_steps = monitor_job.get('steps', [])
        
        instagram_step = None
        for step in monitor_steps:
            if 'Run Instagram Monitor' in step.get('name', ''):
                instagram_step = step
                break
        
        if instagram_step and 'env' in instagram_step:
            env_vars = instagram_step['env']
            required_env_vars = ['TARGET_USERNAME', 'GITHUB_TOKEN', 'GITHUB_REPOSITORY']
            
            for var in required_env_vars:
                if var in env_vars:
                    print(f"‚úÖ Environment variable: {var}")
                else:
                    print(f"‚ùå Missing environment variable: {var}")
                    return False
        else:
            print("‚ö†Ô∏è Could not find Instagram Monitor step or environment variables")
        
        print("\nüéâ Workflow validation passed!")
        return True
        
    except yaml.YAMLError as e:
        print(f"‚ùå YAML syntax error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Validation error: {e}")
        return False

def show_common_fixes():
    """Show common fixes for workflow issues"""
    print("\nüîß Common Fixes:")
    print("=" * 20)
    print("1. ‚ùå 'secrets' in 'if' conditions:")
    print("   ‚úÖ Move secret checks into step environment variables")
    print()
    print("2. ‚ùå YAML indentation errors:")
    print("   ‚úÖ Use consistent 2-space indentation")
    print()
    print("3. ‚ùå Missing permissions:")
    print("   ‚úÖ Add required permissions at top level")
    print()
    print("4. ‚ùå Invalid cron syntax:")
    print("   ‚úÖ Use https://crontab.guru/ to validate")

def main():
    print("üß™ GitHub Actions Workflow Validator")
    print("=" * 40)
    
    success = validate_workflow()
    
    if not success:
        show_common_fixes()
        print("\n‚ùå Workflow validation failed!")
        print("üìù Please fix the issues above before deploying.")
        sys.exit(1)
    else:
        print("\n‚úÖ Workflow is valid and ready for deployment!")
        print("üöÄ You can now commit and push to trigger the workflow.")

if __name__ == "__main__":
    main()
