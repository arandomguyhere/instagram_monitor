name: Instagram Monitor

on:
  workflow_dispatch:
    inputs:
      users:
        description: "Comma-separated usernames (no @). Leave blank for default."
        required: false
        default: "therock"
      prefer_mobile:
        description: "Prefer mobile web JSON fallback for profiles"
        required: false
        default: "false"
  schedule:
    - cron: "0 */6 * * *"

concurrency:
  group: instagram-monitor
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      user_matrix: ${{ steps.mk.outputs.user_matrix }}
    steps:
      - name: Build user matrix
        id: mk
        run: |
          if [ -n "${{ github.event.inputs.users }}" ]; then
            # Parse the input from manual trigger
            INPUT="${{ github.event.inputs.users }}"
          else
            # Default for scheduled runs - monitor all default users
            INPUT="therock,cristiano,selenagomez,taylorswift,kimkardashian"
          fi
          
          # Convert CSV to JSON array using Python
          MATRIX=$(echo "$INPUT" | python3 -c "
          import sys, json
          raw = sys.stdin.read().strip()
          users = [u.strip().lstrip('@') for u in raw.split(',') if u.strip()]
          print(json.dumps(users if users else ['therock']))
          ")
          
          echo "user_matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Generated matrix: $MATRIX"

  monitor:
    name: Monitor ${{ matrix.user }}
    needs: plan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        user: ${{ fromJson(needs.plan.outputs.user_matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run monitor
        env:
          INSTAGRAM_SESSION_USERNAME: ${{ secrets.INSTAGRAM_SESSION_USERNAME }}
          INSTAGRAM_SESSION_PASSWORD: ${{ secrets.INSTAGRAM_SESSION_PASSWORD }}
        run: |
          USERNAME='${{ matrix.user }}'
          OUT="monitoring_data/${USERNAME}"
          mkdir -p "$OUT"
          
          # Always download profile pictures
          FLAGS="--download-pfp --verbosity 1"
          
          if [ "${{ github.event.inputs.prefer_mobile }}" = "true" ]; then
            FLAGS="$FLAGS --prefer-mobile"
          fi
          
          if [ -z "${INSTAGRAM_SESSION_USERNAME}" ] || [ -z "${INSTAGRAM_SESSION_PASSWORD}" ]; then
            echo "[info] No IG creds detected; using --unauth-only"
            FLAGS="$FLAGS --unauth-only"
          fi
          
          echo "Running: python monitor.py --mode monitor --target-user '$USERNAME' --output-dir '$OUT' $FLAGS"
          python monitor.py \
            --mode monitor \
            --target-user "$USERNAME" \
            --output-dir "$OUT" \
            $FLAGS
            
      - name: Commit changes (if any)
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update IG data for ${{ matrix.user }}"
          file_pattern: |
            monitoring_data/**/*.json
            monitoring_data/**/*.jpg
            monitoring_data/**/*.jpeg
            monitoring_data/**/*.png
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          skip_dirty_check: false

  deploy:
    needs: monitor
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main  # Ensure we get the latest commits
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: "."
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
