name: Fix It All
on:
  workflow_dispatch:
permissions:
  contents: write
  pull-requests: write

jobs:
  fix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply fixes (all in Node, no bash tricks)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const path = require("path");

            const ensureDir = p => fs.mkdirSync(p, { recursive: true });
            const exists = p => fs.existsSync(p);
            const read = p => fs.readFileSync(p, "utf8");
            const write = (p, c) => { ensureDir(path.dirname(p)); fs.writeFileSync(p, c); };
            const remove = p => { if (exists(p)) fs.rmSync(p, { recursive: true, force: true }); };

            // 1) monitor.py patches
            if (exists("monitor.py")) {
              let t = read("monitor.py");

              // import fix
              t = t.replace(
                /from requests\.adapters import HTTPAdapter,\s*Retry/g,
                "from requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry"
              );

              // logger fix (replace whole function body if present)
              const loggerRe = /def setup_logger\(verbosity: int = 1\)[\s\S]*?return logger/;
              const newLogger =
`def setup_logger(verbosity: int = 1) -> logging.Logger:
    logger = logging.getLogger("instagram_monitor")
    logger.setLevel(logging.DEBUG)
    fmt = logging.Formatter("[%(levelname)s] %(message)s")
    if logger.handlers:
        ch = logger.handlers[0]
        ch.setLevel(logging.DEBUG if verbosity > 1 else logging.INFO)
        ch.setFormatter(fmt)
    else:
        ch = logging.StreamHandler(sys.stdout)
        ch.setLevel(logging.DEBUG if verbosity > 1 else logging.INFO)
        ch.setFormatter(fmt)
        logger.addHandler(ch)
    return logger`;

              if (loggerRe.test(t)) {
                t = t.replace(loggerRe, newLogger);
              }

              write("monitor.py", t);
              core.info("monitor.py patched");
            } else {
              core.info("monitor.py not found; skipping.");
            }

            // 2) workflows: add `export INPUT` after the INPUT guard line
            const wfDir = ".github/workflows";
            if (exists(wfDir)) {
              for (const name of fs.readdirSync(wfDir)) {
                if (!name.endsWith(".yml") && !name.endsWith(".yaml")) continue;
                const p = path.join(wfDir, name);
                let txt = read(p);
                if (!/Build user matrix/.test(txt)) continue;

                if (!/export INPUT/.test(txt)) {
                  const guard = /if \[ -z "\$INPUT" \]; then INPUT="therock"; fi/;
                  if (guard.test(txt)) {
                    txt = txt.replace(guard, m => `${m}\n          export INPUT`);
                    write(p, txt);
                    core.info(`Patched export INPUT in ${name}`);
                  } else {
                    core.info(`No INPUT guard found in ${name}; not patched.`);
                  }
                } else {
                  core.info(`export INPUT already present in ${name}`);
                }
              }
            }

            // 3) remove orphaned files
            ["config_server.py","instagram_monitor_config.py","config.json.example","test_setup.py",
             "instagram_profile_pic_empty.jpeg","placeholder_svg.svg"].forEach(remove);

            // 4) remove tracked runtime data paths if present
            remove("monitoring_data/therock");
            if (exists("data")) {
              for (const f of fs.readdirSync("data")) remove(path.join("data", f));
            }

            // 5) ensure dirs + .gitkeep
            ensureDir("monitoring_data");
            ensureDir("data");
            write("monitoring_data/.gitkeep", "");
            write("data/.gitkeep", "");

            // 6) .gitignore
            write(".gitignore",
`__pycache__/
*.py[cod]
.env
.venv
venv/

# Runtime outputs - NEVER commit
monitoring_data/
data/
!monitoring_data/.gitkeep
!data/.gitkeep

# Logs / OS
*.log
.DS_Store
`);

            // 7) requirements.txt
            write("requirements.txt",
`instaloader>=4.11
requests>=2.31.0
urllib3>=2.0.0
python-dateutil>=2.8.2
pytz>=2023.3
`);

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "fix: workflow input, imports, logger; cleanup & ignore runtime data"
          title: "Fix: monitor stability & repo hygiene (imports, INPUT export, logger, cleanup)"
          body: |
            This PR applies the repo-wide hardening and cleanup:
            - Fix `monitor.py` Retry import and logger verbosity handler
            - Ensure `export INPUT` wherever the user matrix is built
            - Remove orphaned files and tracked runtime data
            - Add `.gitignore`, placeholders, and `requirements.txt`

            Verify by running the monitor with `users: bob` and checking output under `monitoring_data/bob/`.
          branch: fix/monitor-stability
          delete-branch: false
