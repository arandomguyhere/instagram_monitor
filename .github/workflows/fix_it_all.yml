name: Fix It All

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  fix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply fixes (imports, logger, workflows, cleanup, ignores, requirements)
        shell: bash
        run: |
          set -euo pipefail

          echo "==> Patch monitor.py import Retry location"
          if grep -q "from requests.adapters import HTTPAdapter, Retry" monitor.py 2>/dev/null; then
            sed -i 's/from requests.adapters import HTTPAdapter, Retry/from requests.adapters import HTTPAdapter\
from urllib3.util.retry import Retry/' monitor.py
          else
            echo "Import line already OK or file missing; skipping."
          fi

          echo "==> Patch monitor.py logger function (idempotent replace)"
          python - <<'PY'
import re, pathlib, sys
p = pathlib.Path("monitor.py")
if not p.exists():
    print("monitor.py not found; skipping logger patch.")
    sys.exit(0)
t = p.read_text(encoding="utf-8")
new_block = '''def setup_logger(verbosity: int = 1) -> logging.Logger:
    logger = logging.getLogger("instagram_monitor")
    logger.setLevel(logging.DEBUG)
    fmt = logging.Formatter("[%(levelname)s] %(message)s")
    if logger.handlers:
        ch = logger.handlers[0]
        ch.setLevel(logging.DEBUG if verbosity > 1 else logging.INFO)
        ch.setFormatter(fmt)
    else:
        ch = logging.StreamHandler(sys.stdout)
        ch.setLevel(logging.DEBUG if verbosity > 1 else logging.INFO)
        ch.setFormatter(fmt)
        logger.addHandler(ch)
    return logger'''
t2, n = re.subn(
    r"def setup_logger\(verbosity: int = 1\)[\s\S]*?return logger",
    new_block, t, count=1, flags=re.M
)
if n:
    p.write_text(t2, encoding="utf-8")
    print("Logger function patched.")
else:
    print("Logger function already patched or not found; skipping.")
PY

          echo "==> Ensure export INPUT is present in any workflow building user matrix"
          shopt -s nullglob
          for f in .github/workflows/*.yml .github/workflows/*.yaml; do
            [ -f "$f" ] || continue
            if grep -q "Build user matrix" "$f"; then
              if ! grep -q "export INPUT" "$f"; then
                sed -i '/if \[ -z "\$INPUT" \]; then INPUT="therock"; fi/a\          export INPUT' "$f"
                echo "Patched export INPUT in $f"
              else
                echo "export INPUT already present in $f"
              fi
            fi
          done

          echo "==> Cleanup orphaned files (if present)"
          rm -f config_server.py instagram_monitor_config.py config.json.example test_setup.py || true
          rm -f instagram_profile_pic_empty.jpeg placeholder_svg.svg || true

          echo "==> Remove tracked runtime data (if present)"
          git rm -rf monitoring_data/therock data/* 2>/dev/null || true

          echo "==> Create data dirs and placeholders"
          mkdir -p monitoring_data data
          :> monitoring_data/.gitkeep
          :> data/.gitkeep

          echo "==> Write .gitignore"
          cat > .gitignore << 'EOF'
__pycache__/
*.py[cod]
.env
.venv
venv/

# Runtime outputs - NEVER commit
monitoring_data/
data/
!monitoring_data/.gitkeep
!data/.gitkeep

# Logs / OS
*.log
.DS_Store
EOF

          echo "==> Write requirements.txt (safe pins)"
          cat > requirements.txt << 'EOF'
instaloader>=4.11
requests>=2.31.0
urllib3>=2.0.0
python-dateutil>=2.8.2
pytz>=2023.3
EOF

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "fix: workflow input, imports, logger; cleanup & ignore runtime data"
          title: "Fix: monitor stability & repo hygiene (imports, INPUT export, logger, cleanup)"
          body: |
            **What**
            - Fix `monitor.py` import (`Retry` from `urllib3.util.retry`)
            - Fix logger verbosity handler update
            - Ensure `export INPUT` in any workflow building the user matrix
            - Remove orphaned files & tracked runtime data
            - Add `.gitignore` + placeholders
            - Add `requirements.txt` with sane pins

            **How to verify**
            - Run Instagram Monitor with `users: bob`
            - Expect outputs under `monitoring_data/bob/` and logs showing the chosen user.

          branch: fix/monitor-stability
          delete-branch: false
